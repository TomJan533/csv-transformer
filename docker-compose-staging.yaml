services:
  db:
    image: postgres:13
    tmpfs:
      - /var/lib/postgresql/data
    env_file:
      - ./backend/.env
    networks:
      - app-network
    ports:
      - "5432:5432"
      - "5433:5433"

  redis:
    image: redis:latest
    networks:
      - app-network

  celery:
    build:
      context: ./backend
    command: celery -A api worker --loglevel=info
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - kafka

  beat:
    build:
      context: ./backend
    command: celery -A api beat --loglevel=info
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - kafka

  zookeeper:
    image: wurstmeister/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      
  backend:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - celery
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"

  frontend:
    build:
      context: ./frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: